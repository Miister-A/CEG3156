--- MIPS Single Cycle Processor

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
use ieee.numeric_std.all;
use work.MIPS_RISK_SingleCycle_VARS.all;

entity EX_ALU_Branch is
	port(
		clk, global_reset : in std_logic;
		
		REG_write_outp, ALU_src, PC_src, MEM_write, MEM_read, MEM_to_REG, jump, branch: out std_logic;
		REG_write_adr_outp : out std_logic_vector(dabsz-1 downto 0);
		ALU_op : out std_logic_vector(5 downto 0);
		ALU_shamt : out std_logic_vector(10 downto 6);
		ALU_funct : out std_logic_vector(5 downto 0);
		REG_data1, REG_data2 : out std_logic_vector(dsz-1 downto 0);
		PC_jump, PC_branch_offset : out std_logic_vector(isz-1 downto 0)		
		);
end EX_ALU_Branch;


architecture structural of EX_ALU_Branch is


-- wires


begin

	-- patterned after:
	-- uOttawa CEG 3156 - slideset BML4 - slide 19 
	-- https://uottawa.brightspace.com/d2l/le/content/417607/viewContent/5836345/View
	
	
	PC_branch_adder : entity work.nBit_cla4_adder(structural)
		generic map(isz)
		port map(PC_inc, address_b_extended, '0', PC_branch, open, open);
			-- a, b, c_in, sum, c_out, overflow

	PC_branch_mux : entity work.nBit_mux2(structural)
		generic map(isz)
		port map(branch and ALU_zero, PC_inc, PC_branch, PC_b_next);
		
	PC_jump_mux : entity work.nBit_mux2(structural)
		generic map(isz)
		port map(jump, PC_b_next, PC_jump, PC_next);
		
	
	ALU_A <= REG_data1;
	ALU_mux : entity work.nBit_mux2(structural)
		generic map(dsz)
		port map(ALU_src, address_b_extended, REG_data2, ALU_B);
	
	ALU : entity work.ALU_Simple(structural)
		generic map(dsz)
		port map(ALU_A, ALU_B, ALU_ctrl, ALU_result, ALU_zero, ALU_c_out, ALU_overflow);
				-- A, B, op_sel, result, zero, c_out, overflow
	
end structural;